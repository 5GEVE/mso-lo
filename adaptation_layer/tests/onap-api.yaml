openapi: 3.0.0

servers:
  - description: ns-server
    url: https://github.com/chabimic/NS-InstantiationServer
  - description: Onap driver
    url: https://github.com/TheWall89/adaptation-layer/tree/onap_driver

info:
  description:
    NBI ONAP and ns-server api
    test version
  version: "2"
  title: ONAP and NS-server API
  contact:
    email: michal.grzesik@orange.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: 'NS instances'
    description: Management operations of NS instances
  - name: 'NS lcm'
    description: NS LCM Operations
  - name: 'ONAP NBI API'
    description: Onap NBI API to check the service type

# paths onap nbi & ns-server
paths:
# NS-SERVER
# get all ns instances info
  '/instances':
    get:
      tags:
        - 'NS instances'
      summary: retrieve list of NS instances
      description: list of NS instances
      operationId: getNSlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsInstanceList'
        '400':
          $ref: '#/components/responses/BadRequest'
        # '404':
        #   $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# get ns instnce info
  '/instances/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: NS insctance Id
        schema:
          type : string
    get:
      tags:
        - 'NS instances'
      summary: retrieve informations about ns instance
      description: info about ns instance
      operationId: getNSinfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsInstanceInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# create a ns instance ID
  '/create':
    post:
      tags:
        - 'NS instances'
      summary: create na NS Instance ID
      description: create a NS Instance ID
      operationId: createNS
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNsId'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: link with nsInstanceId of the instantiated NS
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsInstanceIdCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# instantiate NS with given NsId
  '/instantiate/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: NS Instance ID
        schema:
          type : string
    post:
      tags:
        - 'NS instances'
      summary: Instantiate NS with given NS ID
      description: Instantiate NS with given NS ID
      operationId: instantiateNS
      responses:
        '202':
          description: Accepted
          headers:
            Location:
              description: link with nsLcmOpOccId of the instantiated NS
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# terminate NS
  '/terminate/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: NS Instance Id - from db
        schema:
          type : string
    post:
      tags:
        - 'NS instances'
      summary: terminate a NS Instance with given Id
      description: terminate NS Instance
      operationId: terminateNS
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminationTime'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
#        '204':
#          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# delete NS Instance
  '/delete/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: delete NS Instance
        schema:
          type : string
    delete:
      tags:
        - 'NS instances'
      summary: delete NS Instance with given ID
      description: delete NS instance with given ID
      operationId: deleteNS
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
#        '204':
#          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# get list of oll ns_lcm_op_occs
  '/ns_lcm_op_occs':
    get:
      tags:
        - 'NS lcm'
      summary: retrive a list of all ns lcm oppp occs
      description: retrive a list of all ns lcm op occs
      operationId: lcmNSlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List_lcm_op_occs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
#  get a info lcm op occs with given ID
  '/ns_lcm_op_occs/{lcm_id}':
    parameters:
      - name: lcm_id
        in: path
        required: true
        description: lcm ID
        schema:
          type : string
    get:
      tags:
        - 'NS lcm'
      summary: retrieve a lcm info with given ID
      description: retrieve a lcm info with given ID
      operationId: lcmNS
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID_lcm_op_occs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
#  ONAP NBI one method ?filter=name
  '/nbi/api/v4/serviceSpecification/{nsd_id}':
    parameters:
      - name: nsd_id
        in: path
        required: true
        description: NS specification ID
        schema:
          type : string
    get:
      tags:
        - 'ONAP NBI API'
      summary: retrieve information about NS specification
      description: retrieve information about NS specification
      operationId: OnapTypeService
      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/OnapServiceSpecification'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnapServiceSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# components responses
components:
  responses:
    BadRequest:
      description: Bad request. The server cannot process the request due to a client error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    MethodNotAllowed:
      description: This method is not supported for the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
# end component responses
#  components schemas
    NsInstanceList:
      description: list of NS Instances
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/NsInstanceList'
    NsInstanceInfo:
      description: NS Instance Info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NsInstanceInfo'
    NsInstanceIdCreated:
      description: NS Instance ID response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NsInstanceIdCreated'
    List_lcm_op_occs:
      description: list of lcm infos
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/List_lcm_op_occs'
    ID_lcm_op_occs:
      description: lcm id info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ID_lcm_op_occs'
    OnapServiceSpecification:
      description: Onap Service Specification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OnapServiceSpecification'
    Empty:
      description: Onap Service Specification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
# end of schemas in responses
# END RESPONSES
  schemas:
    createNsId:
      # description:
      type: object
      properties:
        nsdId:
          type: string
          format: uuid
        nsName:
          # description:
          type: string
        nsDescription:
          # description:
          type: string
        serviceType:
          # description:
          type: string
      required:
        - nsdId
        - nsName
        - nsDescription
        - serviceType
        - vnfInstance
#
    ProblemDetails:
      type: object
      properties:
        error:
          type: string
      required:
        - error
#
    TerminationTime:
      type: object
      properties:
        terminationTime:
          type: string
          format: date-time
      required:
        - terminationTime
#
    NsInstanceList:
      # description: list of ns instances
      type: array
      items:
        $ref: '#/components/schemas/NsInstanceInfo'
#
    NsInstanceInfo:
      # description: info about single NS instance
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1de0e9c3-b238-44da-b01b-b249a7784b03
        nsInstanceName:
          type: string
        nsInstanceDescription:
          type: string
        nsdId:
          type: string
          format: uuid
          example: c418cc62-f3b4-43c6-b684-d38bfbd2d7f6
        nsState:
          type: string
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
        vnfInstance:
          type: array
          items:
            type: object
      required:
        - id
        - nsInstanceName
        - nsInstanceDescription
        - nsdId
        - nsState
        - vnfInstance
#
    NsInstanceIdCreated:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1de0e9c3-b238-44da-b01b-b249a7784b03
        nsInstanceName:
          type: string
        nsInstanceDescription:
          type: string
        nsdId:
          type: string
          format: uuid
          example: c418cc62-f3b4-43c6-b684-d38bfbd2d7f6
        nsState:
          type: string
          enum:
            - INSTANTIATED
        vnfInstance:
          type: array
          items:
            type: object
      required:
        - id
        - nsInstanceName
        - nsInstanceDescription
        - nsdId
        - nsState
        - vnfInstance
#
    List_lcm_op_occs:
      type: array
      items:
        $ref: '#/components/schemas/ID_lcm_op_occs'
#
    ID_lcm_op_occs:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1de0e9c3-b238-44da-b01b-b249a7784b03
        operationState:
          type: string
        stateEnteredTime:
          type: string
        nsInstanceId:
          type: string
          format: uuid
          example: c418cc62-f3b4-43c6-b684-d38bfbd2d7f6
        lcmOperationType:
          type: string
        startTime:
          type: string
          format: date-time
#
    OnapServiceSpecification:
      type: object
      properties:
        name:
          type: string
#
    Empty:
      type: object
      # properties:
  # END SCHEMAS
  # start request bodies
  requestBodies:
    createNsId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createNsId'
    TerminationTime:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TerminationTime'
  # END REQUEST BODIES
#
# # commented
#   securitySchemes:
#     bearerAuth:
#       type: http
#       scheme: bearer
