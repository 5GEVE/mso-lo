openapi: 1.0.0

servers:
  - description: ONAP and ns-server API

info:
  description: |
    NBI ONAP and ns-server api
    test version

# zostawione - nie wiem czy potrzebne
tags:
  - name: 'VNF packages'
    description: Management operations of VNF descriptors and packages
  - name: 'NS packages'
    description: Management operations of NS descriptors and packages
  - name: 'NS instances'
    description: Management operations of NS instances
  - name: 'NetSlice templates'
    description: Management operations of NetSlice Templates
  - name: 'NetSlice instances'
    description: Management operations of NetSlice Instances

# sciezki do onap nbi api oraz ns-server
paths:
# NS-SERVER
# get all ns instances info
  '/instances':
    get:
      tags:
        - "list of NS instances"
      summary:
      description:
      operationId:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsInstanceList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# get ns instnce info
  '/instances/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: NS insctance Id
        schema:
          type : string
    get:
      tags:
        - "NS instance info"
      summary:
      description:
      operationId:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsInstanceInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# create a ns instance ID
  '/create':
    post:
      tags:
        - "create a NS Instance ID"
      summary: create na NS Instance ID
      description:
      operationId:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNsId'
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsInstanceIdCreated'
        '202':
          description: Accepted
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# instantiate NS with given NsId
  '/instantiate_ns/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: NS Instance ID
        schema:
          type : string
    post:
      tags:
        - "instantiate NS"
      summary: Instantiate NS with given NS ID
      description:
      operationId:
      # requestBody:
      #   $ref: '#/components/requestBodies/CreateVnfPkgInfoRequest'
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
                format: uri
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ObjectId'
          #   application/yaml:
          #     schema:
          #       $ref: '#/components/schemas/ObjectId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# terminate NS
  '/terminate/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: NS Instance Id - db
        schema:
          type : string
    post:
      tags:
        - "terminate NS Instance"
      summary: terminate a NS Instance with given Id
      description:
      operationId:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminationTime'
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
                format: uri
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ObjectId'
          #   application/yaml:
          #     schema:
          #       $ref: '#/components/schemas/ObjectId'
        '202':
          description: Accepted
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# delete NS Instance
  '/delete/{ns_db_id}':
    parameters:
      - name: ns_db_id
        in: path
        required: true
        description: delete NS Instance
        schema:
          type : string
    delete:
      tags:
        - "delete NS Instance"
      summary: delete NS Instance with given ID
      description:
      operationId:
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# get list of oll ns_lcm_op_occs
  '/ns_lcm_op_occs':
    get:
      tags:
        - "NS LCM OP"
      summary: retrive a list of all ns lcm oppp occs
      description:
      operationId:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List_lcm_op_occs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
#  get a info lcm op occs with given ID
  '/ns_lcm_op_occs/{lcm_id}':
    parameters:
      - name: lcm_id
        in: path
        required: true
        description: LCM ID
        schema:
          type : string
    get:
      tags:
        - "LCM ID INFO"
      summary: retrieve a lcm info with given ID
      description:
      operationId:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID_lcm_op_occs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# # # # #
#  ONAP NBI one method
  '/nbi/api/v4/serviceSpecification/{nsd_id}?fields=name':
    parameters:
      - name: nsd_id
        in: path
        required: true
        description: NS specification ID
        schema:
          type : string
    get:
      tags:
        - "NS specification ID"
      summary: Query information about NS specification
      description:
      operationId:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnapServiceSpecification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

# externalDocs:
#   description: Find out more OSM
#   url: 'http://osm.etsi.org/wikipub'

components:
  responses:
    BadRequest:
      description: Bad request. The server cannot process the request due to a client error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    MethodNotAllowed:
      description: This method is not supported for the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
# koniec zwiazanycmi z odpowiedziami / component responses
#  start zwiazanycmi z odpowiedziami a jednoczesnie z components schemas
    NsInstanceList:
      description: list of NS Instances
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/NsInstanceList'
    NsInstanceInfo:
      description: NS Instance Info
      content:
        application/zip:
          schema:
            $ref: '#/components/schemas/NsInstanceInfo'
    NsInstanceIdCreated:
      description: NS Instance ID response
      content:
        application/zip:
          schema:
            $ref: '#/components/schemas/NsInstanceIdCreated'
    List_lcm_op_occs:
      description: list of lcm infos
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/List_lcm_op_occs'
    ID_lcm_op_occs:
      description: lcm id info
      content:
        application/zip:
          schema:
            $ref: '#/components/schemas/ID_lcm_op_occs'
    OnapServiceSpecification:
      description: Onap Service Specification
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/OnapServiceSpecification'
# end of schemas in responses
# END RESPONSES

  schemas:
# # json example
#     ObjectId:
#       type: object
#       properties:
#         id:
#           type: string
#           format: uuid
#
    createNsId:
      description:
      type: object
      properties:
        nsdId:
          type: string
          format: uuid
        nsName:
          description:
          type: string
        nsDescription:
          description:
          type: string
        serviceType:
          description:
          type: string
      required:
        - nsdId
        - nsName
        - nsDescription
        - serviceType
#
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
      additionalProperties: true
      required:
        - status
        - detail
#
    TerminationTime:
      description:
      type: object
      properties:
        terminationTime:
          type: string
          format: date-time
      required:
        - terminationTime
#
    NsInstanceList:
      description:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nsInstanceName:
          description:
          type: string
        nsInstanceDescription:
          description:
          type: string
        nsdId:
          description:
          type: string
          format: uuid
        nsState:
          description:
          type: string
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
        vnfInstance:
          description:
          type: array
      required:
        - id
        - nsInstanceName
        - nsInstanceDescription
        - nsdId
        - nsState
        - vnfInstance
#
    NsInstanceInfo:
      description:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nsInstanceName:
          description:
          type: string
        nsInstanceDescription:
          description:
          type: string
        nsdId:
          description:
          type: string
          format: uuid
        nsState:
          description:
          type: string
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
        vnfInstance:
          description:
          type: array
      required:
        - id
        - nsInstanceName
        - nsInstanceDescription
        - nsdId
        - nsState
        - vnfInstance
#
    createNsId:
      description:
      type: object
      properties:
        nsdId:
          type: string
          format: uuid
        nsName:
          description:
          type: string
        nsDescription:
          description:
          type: string
        serviceType:
          description:
          type: string
      required:
        - nsdId
        - nsName
        - nsDescription
        - serviceType
#
    NsInstanceIdCreated:
      description:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nsInstanceName:
          description:
          type: string
        nsInstanceDescription:
          description:
          type: string
        nsdId:
          description:
          type: string
          format: uuid
        nsState:
          description:
          type: string
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
      required:
        - id
        - nsInstanceName
        - nsInstanceDescription
        - nsdId
        - nsState
# -----
    List_lcm_op_occs:
      description:
      type: object
      properties:
        id:
          type: string
          format: uuid
        operationState:
          description:
          type: string
        stateEnteredTime:
          description:
          type: string
        nsInstanceId:
          description:
          type: string
          format: uuid
        lcmOperationType:
          description:
          type: string
        startTime:
          type: string
          format: date-time
      # required:
      #   - id
      #   -
      #   - nsInstanceDescription
      #   - nsdId
      #   - nsState
#
    ID_lcm_op_occs:
      description:
      type: object
      properties:
        id:
          type: string
          format: uuid
        operationState:
          description:
          type: string
        stateEnteredTime:
          description:
          type: string
        nsInstanceId:
          description:
          type: string
          format: uuid
        lcmOperationType:
          description:
          type: string
        startTime:
          type: string
          format: date-time
# TODO finish it
    OnapServiceSpecification:
      description:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nsInstanceName:
          description:
          type: string
        nsInstanceDescription:
          description:
          type: string
        nsdId:
          description:
          type: string
          format: uuid
        nsState:
          description:
          type: string
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
      required:
        - id
        - nsInstanceName
        - nsInstanceDescription
        - nsdId
        - nsState

  # END SCHEMAS
  # start request bodies
  # application/json:
  requestBodies:
    createNsId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createNsId'
    TerminationTime:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TerminationTime'
  # END REQUEST BODIES

# # whats that? - commented
#   securitySchemes:
#     bearerAuth:
#       type: http
#       scheme: bearer
